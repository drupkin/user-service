import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.5.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.allopen' version '1.7.22'
    id 'org.jetbrains.kotlin.kapt' version '1.7.22'
}

dependencies {
    // Intra projects
    implementation project(":modules:commons:commons-kafka-producer")
    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security
    // Postgres
    runtimeOnly 'org.postgresql:postgresql'
    // Jackson
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    kapt("org.springframework.boot:spring-boot-configuration-processor")

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // Apache avro
    implementation 'org.apache.avro:avro:1.11.1'
    implementation 'io.confluent:kafka-avro-serializer:7.3.1'

    // Keycloak
//    implementation("org.keycloak:keycloak-spring-boot-starter:20.0.0")

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.kotest:kotest-assertions-core:5.5.4'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'com.ninja-squad:springmockk:3.1.2'
}

sourceCompatibility = '17'

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask) {
    setSource(file("${projectDir}/../../spec/").absolutePath)
    setOutputDir(file("${projectDir}/build/generated/avro"))

    avro {
        fieldVisibility.set("PRIVATE")
        outputCharacterEncoding.set("UTF-8")
    }
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.Embeddable")
    annotation("javax.persistence.MappedSuperclass")
}